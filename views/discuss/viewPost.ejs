<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>View Post</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/tw-elements/dist/css/tw-elements.min.css"
    />
    <script src="https://cdn.tailwindcss.com/3.3.0"></script>
    <style>
      body {
        background-image: url('/assets/image/white-texture-base.jpg');
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: 100% 100%;
      }
    </style>
  </head>
  <body>
    <!-- Container for demo purpose -->
  <div class="container my-24 mx-auto md:px-6">
    <!-- Section: Design Block -->
    <section class="mb-32">
      <div class="flex flex-wrap">
        <div class="mb-12 w-full shrink-0 grow-0 basis-auto lg:mb-0 lg:w-5/12">
          <div class="flex lg:py-12">
            <img src="/assets/image/Avatar.jpg"
              class="z-[10] w-full rounded-lg shadow-lg dark:shadow-black/20 lg:ml-[50px]" alt="image" />
          </div>
        </div>
        
        <div class="w-full shrink-0 grow-0 basis-auto lg:w-7/12">
          <div
            class="flex h-full items-center rounded-lg bg-yellow-600 p-6 text-center text-white lg:pl-12 lg:text-left">
            <div class="lg:pl-12">
                </button>
                <button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                <svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m4 4l-4-4 4-4"/>
                </svg>
                <span class="sr-only">Icon description</span>
                </button>
              <h2>auther : <span id="user-details"><%= post.user.email %></span></h2>
              <h2 class="mb-8 text-3xl font-bold" id="post-title"><%= post.title %></h2>
              <p class="mb-8 pb-2 lg:pb-0" id="post-content">
                <%= post.content %>
              </p>
  
              <div class="mx-auto mb-8 flex flex-col md:flex-row md:justify-around xl:justify-start">
                <p class="mx-auto mb-4 flex items-center md:mx-0 md:mb-2 lg:mb-0 xl:mr-20" id="vote-count">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 m-1">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
                      </svg>                      
                  <%=post.up - post.down%>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <!-- Section: Design Block -->
    <%if(post.user._id.toString() === user._id.toString() || user.role == 'supreme'){%>
      <button id="delete-post-btn" class="bg-danger h-10 w-40 rounded-lg mr-10">Delete Post</button>
    <%}%>
    <%if(user.role == 'supreme'){%>
      <button id="ban-post-btn" class="bg-warning h-10 w-40 rounded-lg">Ban Post</button>
    <%}%>
    <%if(post.isBanned == true){%>
      <div class="text-center m-auto w-1/2 text-3xl text-red-500 font-bold">
        <h2>This post is banned</h2>  
      </div>
    <%}%>
    <!--Heading with the name-->
    <h5 class="m-3">Write comment with the name <span class="font-bold"><%=user.username%></span></h5>
    <!-- Comment Box : Write your messge here -->
    <form id="comment-form" method="post" action="/api/comments/create">
      <div class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
          <div class="px-4 py-2 bg-white rounded-t-lg dark:bg-gray-800">
              <label for="content" class="sr-only">Your comment</label>
              <textarea name="content" id="content" rows="4" class="w-full px-0 text-sm text-gray-900 bg-white border-0 dark:bg-gray-800 focus:ring-0 dark:text-white dark:placeholder-gray-400" placeholder="Write a comment..." required></textarea>
          </div>
          <div class="flex items-center justify-between px-3 py-2 border-t dark:border-gray-600">
              <button id="post-btn" type="submit" class="inline-flex items-center py-2.5 px-4 text-xs font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-900 hover:bg-blue-800">
                  Post comment
              </button>
              <div class="flex ps-0 space-x-1 rtl:space-x-reverse sm:ps-2">
                  <button type="button" class="inline-flex justify-center items-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                      <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 20">
                           <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M1 6v8a5 5 0 1 0 10 0V4.5a3.5 3.5 0 1 0-7 0V13a2 2 0 0 0 4 0V6"/>
                       </svg>
                      <span class="sr-only">Attach file</span>
                  </button>
                  <button type="button" class="inline-flex justify-center items-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                      <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                           <path d="M8 0a7.992 7.992 0 0 0-6.583 12.535 1 1 0 0 0 .12.183l.12.146c.112.145.227.285.326.4l5.245 6.374a1 1 0 0 0 1.545-.003l5.092-6.205c.206-.222.4-.455.578-.7l.127-.155a.934.934 0 0 0 .122-.192A8.001 8.001 0 0 0 8 0Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z"/>
                       </svg>
                      <span class="sr-only">Set location</span>
                  </button>
                  <button type="button" class="inline-flex justify-center items-center p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600">
                      <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                           <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                       </svg>
                      <span class="sr-only">Upload image</span>
                  </button>
              </div>
          </div>
      </div>
   </form>
   <p class="ms-auto text-xs text-gray-500 dark:text-gray-400">Remember, contributions to this topic should follow our <a href="#" class="text-blue-600 dark:text-blue-500 hover:underline">Community Guidelines</a>.</p>
  </div>
  <!--CommentList-->
    <%post.comments.forEach(comment =>{%>
      <%-include("../components/comment.ejs",{comment})%>
    <%})%>
  <!-- Container for demo purpose -->
    </div>
    <script src="https://cdn.jsdelivr.net/npm/tw-elements/dist/js/tw-elements.umd.min.js"></script>
  </body>
</html>

<script>
  const postButton = document.getElementById("post-btn");
  const deletePostButton = document.getElementById("delete-post-btn");
  const banPostButton = document.getElementById("ban-post-btn");
  if (banPostButton) {
    banPostButton.addEventListener("click", async (e) => {
        console.log("Button Clicked");
        e.preventDefault();
        const postId = window.location.pathname.split('/').pop();
        const jwtToken = getCookie("jwt");
        const formBody = {
            resourse: postId
        };
        try {
            const response = await fetch(`/api/posts/ban`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "jwt": jwtToken
                },
                body: JSON.stringify(formBody)
            });
            const responseData = await response.json();
            if (response.ok) {
                window.location.href = "/discuss/home";
                alert(responseData.message);
            } else {
                console.error("Error:", response.status);
                alert("Error: Unable to ban post. Please try again later.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Error: Unable to ban post. Please try again later.");
        }
    });
  }
  if (deletePostButton) {
        deletePostButton.addEventListener("click", async (e) => {
            console.log("Button Clicked")
            e.preventDefault();
            const postId = window.location.pathname.split('/').pop();
            const jwtToken = getCookie("jwt");
            const formBody = {
                resourse: postId
            };
            try {
                const response = await fetch(`/api/posts/delete`, {
                    method: "delete",
                    headers: {
                        "Content-Type": "application/json",
                        "jwt": jwtToken
                    },
                    body: JSON.stringify(formBody)
                });
                const responseData = await response.json();
                if (response.ok) {
                    window.location.href = "/discuss/home";
                    alert(responseData.message);
                } else {
                    // Check if response is JSON
                    const responseData = await response.json();
                    if (responseData && responseData.message) {
                        throw new Error(responseData.message);
                    } else {
                        throw new Error("Unknown error occurred");
                    }
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error: " + error.message);
            }
        });
    }

    if (postButton) {
    postButton.addEventListener("click", async (e) => {
        e.preventDefault();
        const commentForm = document.getElementById("comment-form");
        const formData = new FormData(commentForm);
        const postId = window.location.pathname.split('/').pop();
        const formBody = {
            content: formData.get("content"),
            resourse: postId
        };
        const jwtToken = getCookie("jwt");
        const response = await fetch("/api/comments/create", {
            method: "post",
            headers: {
                "Content-Type": "application/json",
                "jwt": jwtToken
            },
            body: JSON.stringify(formBody)
        });
        const responseData = await response.json();
        if (response.ok) {
            location.reload();
            alert(responseData.message); // Alert for successful result
        } else {
            console.error(responseData.message);
            alert(responseData.message); // Alert for error
        }
    });
}
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(";").shift();
  }
</script>
