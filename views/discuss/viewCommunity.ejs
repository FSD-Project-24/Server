<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .container {
            max-width: 1000px; /* Adjust the width as needed */
            margin: auto; /* Center the container */
            margin-top: 40px;
        }
        body {
            background-image: url('/assets/image/cream_base_1.jpg');
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-size: 100% 100%;
        }
    </style>
</head>
<body>
    <header>
        <!-- Intro settings -->
        <style>
          /* Default height for small devices */
          #intro-example {
            height: 400px;
          }
      
          /* Height for devices larger than 992px */
          @media (min-width: 992px) {
            #intro-example {
              height: 600px;
            }
          }
        </style>
        <!-- Background image -->
        <div id="intro-example" class="p-5 text-center bg-image"
          style="background-image: url('/assets/image/Banner_1.jpg');">
          <div class="mask" style="background-color: rgba(0, 0, 0, 0.7);">
            <div class="d-flex justify-content-center align-items-center h-100">
              <div class="text-white">
                <h1 class="mb-3"><%=community.name%></h1>
                <h5 class="mb-4">
                  We are all Connected!
                </h5>
                <a id="join-community-btn" data-mdb-ripple-init class="btn btn-outline-light btn-lg m-2" role="button" rel="nofollow">JOIN</a>
                <a id="open-post-modal" data-mdb-ripple-init class="btn btn-outline-light btn-lg m-2" role="button">CREATE POST</a>
                <%if(user.role == "supreme"){%>
                  <a id="ban-community-btn" data-community-id="<%=community._id%>" data-mdb-ripple-init class="btn btn-outline-light btn-lg m-2" role="button">BAN COMMUNITY</a>
                <%}%>
                <% if (user._id.toString() === community.owner._id.toString()) { %>
                  <a id="delete-community-btn" data-community-id="<%= community._id %>" data-mdb-ripple-init class="btn btn-outline-light btn-lg m-2" role="button">DELETE COMMUNITY</a>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        <!-- Background image -->
        <!-- CreatePostForm -->
        <div class="position-fixed top-50 start-50 translate-middle">
            <div id="form-container" class="bg-white rounded p-4 shadow" style="display: none; width: 70vw; max-width: 500px; backdrop-filter: blur(5px);">
                <form id="create-post-form" style="display: none;">
                    <button type="button" class="btn-close" aria-label="Close"></button>
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="title" name="title">
                    </div>
                    <div class="mb-3">
                        <label for="content" class="form-label">Content</label>
                        <input type="text" class="form-control" id="content" name="content">
                    </div>
                    <button id="create-post-btn" type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
        <!-- IsBanned -->
        <%if(community.isBanned){%>
          <div class="container">
            <div class="row">
                <div class="col text-center">
                    <h2 style="color: red;">This Community is Banned</h2>
                </div>
            </div>
        </div>
        <%}%>
      </header>

      <!-- Creating Post List -->
      <div class="posts-container">
        <% community.posts.forEach(function(post){ %>
          <div class="container">
                <%- include('../components/post', {post: post}) %>
            </div>
        <% }); %>
      </div>
      
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
      <script>
        
        const formContainer = document.getElementById("form-container");
        const openPostModal = document.getElementById("open-post-modal");
        const closePostModal = document.querySelector('.btn-close');
        const createPostForm = document.getElementById("create-post-form");
        const deleteCommunityButton = document.getElementById("delete-community-btn");
        const banCommunityButton = document.getElementById("ban-community-btn");
        const joinCommunityButton = document.getElementById("join-community-btn");
        if(openPostModal){
          openPostModal.addEventListener('click',()=>{
              document.getElementById("create-post-form").style.display = "block";
              formContainer.style.display = "block";
          })
        }
        if(closePostModal){
          closePostModal.addEventListener('click',()=>{
              document.getElementById("create-post-form").style.display = "none";
              formContainer.style.display = "none";
          })
        }
        if (createPostForm) {
            createPostForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(createPostForm);
                const jwtToken = getCookie("jwt");
                try {
                    const response = await fetch("/api/posts/create", {
                        method: "post",
                        headers: {
                            "Content-Type": "application/json",
                            jwt: jwtToken,
                        },
                        body: JSON.stringify({ resourse: '<%=community._id%>', title: formData.get("title"), content: formData.get("content") }),
                    })
                    const responseData = await response.json();
                    if (response.ok) {
                        window.location.href = "/discuss/home";
                        alert(responseData.message);
                    } else {
                        // Check if response is JSON
                        const responseData = await response.json();
                        if (responseData && responseData.message) {
                            throw new Error(responseData.message);
                        }else if(responseData && responseData.error){
                            throw new Error(responseData.error);
                        }else {
                            throw new Error("Unknown error occurred");
                        }
                    }
                } catch (error) {
                    console.error("Create post request error:", error);
                    alert("Create post request error: " + error.message);
                }
            })
        }
        if(deleteCommunityButton){
          deleteCommunityButton.addEventListener("click", async (e) => {
              e.preventDefault();
              const communityId = window.location.pathname.split('/').pop();
              const jwtToken = getCookie("jwt");
              const formBody = {
                resourse : communityId
              }
              const response = await fetch("/api/communities/delete", {
                  method: "delete",
                  headers: {
                      jwt: jwtToken,
                      "Content-Type": "application/json",
                  },
                  body: JSON.stringify(formBody)
              });
              if (response.ok) {
                  window.location.href = "/discuss/home";
              } else {
                  console.error(response.message);
                  alert(response.message);
              }
          });
        }
        if (joinCommunityButton) {
        joinCommunityButton.addEventListener("click", async (e) => {
            e.preventDefault();
            const jwtToken = getCookie("jwt");
            try {
                const response = await fetch("/api/communities/join", {
                    method: "post",
                    headers: {
                        "Content-Type": "application/json",
                        jwt: jwtToken,
                    },
                    body: JSON.stringify({ resourse: '<%=community._id%>' }),
                });
                if (response.ok) {
                    window.location.href = "/discuss/home";
                } else {
                    // Check if response is JSON
                    const responseData = await response.json();
                    if (responseData && responseData.message) {
                        throw new Error(responseData.message);
                    } else {
                        throw new Error("Unknown error occurred");
                    }
                }
            } catch (error) {
                console.error("Join community request error:", error);
                alert("Join community request error: " + error.message);
            }
            })
        }
        if (banCommunityButton) {          
          banCommunityButton.addEventListener("click", async (e) => {
              e.preventDefault();
              const communityId = window.location.pathname.split('/').pop();
              const jwtToken = getCookie("jwt");
              const formBody = {
                  resourse: communityId
              };
              try {
                  const response = await fetch("/api/communities/ban", {
                      method: "put",
                      headers: {
                          jwt: jwtToken,
                          "Content-Type": "application/json",
                      },
                      body: JSON.stringify(formBody)
                  });
                  if (response.ok) {
                      window.location.href = "/discuss/home";
                  } else {
                      // Check if response is JSON
                      const responseData = await response.json();
                      if (responseData && responseData.message) {
                          throw new Error(responseData.message);
                      } else {
                          throw new Error("Unknown error occurred");
                      }
                  }
              } catch (error) {
                  console.error("Ban community request error:", error);
                  alert("Ban community request error: " + error.message);
              }
          });
      }
        function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
      }
      </script>
</body>
</html>
